/**
 * Configurations for code coverage
 */
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

def testReport = tasks.register('testReport', TestReport) {
  group = 'Build'
  description = 'Generates an aggregate test report'
  destinationDirectory = layout.buildDirectory.dir('reports/allTests')
}

subprojects {
  apply plugin: 'java-library'

  tasks.withType(Test).configureEach { testTask ->
    testReport.configure {
      reportOn testTask
    }
    testTask.dependsOn(jar)

    // ensure tasks don't overwrite the default report directories used by the 'test' task
    reports.html.outputLocation = file(layout.buildDirectory.file("reports/${name}"))
    reports.junitXml.outputLocation = file(layout.buildDirectory.file("reports/${name}/results"))
    binaryResultsDirectory = layout.buildDirectory.dir("reports/${name}/results/binary/${name}")
  }
}

// Only report code coverage for projects that are distributed
def coveredProjects = [ 'caffeine', 'guava', 'jcache' ].collect { project(it) }

def jacocoFullReport = tasks.register('jacocoFullReport', JacocoReport) {
  group = 'Coverage reports'
  description = 'Generates an aggregate report'

  coveredProjects.each { proj ->
    sourceSets proj.sourceSets.main
    mustRunAfter proj.tasks.withType(Test)
    executionData fileTree(rootDir.absolutePath).include("**/*${proj.name}*/**/jacoco/*.exec")
  }
  subprojects.each { proj ->
    dependsOn proj.tasks.compileTestJava
  }

  reports {
    html.required = true // human readable
    xml.required = true  // required by coveralls
  }
}

coveralls {
  sourceDirs = coveredProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = layout.buildDirectory.file(
    'reports/jacoco/jacocoFullReport/jacocoFullReport.xml')
}

tasks.named('coveralls').configure {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'
  notCompatibleWithConfigurationCache(
    'The coveralls task is not compatible with the configuration cache')
  dependsOn jacocoFullReport
  onlyIf { System.env.CI }
}

allprojects {
  apply plugin: 'org.sonarqube'
}
tasks.sonarqube.dependsOn(jacocoFullReport)

sonarqube {
  properties {
    property 'sonar.organization', 'caffeine'
    property 'sonar.login', System.env.SONAR_TOKEN
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.cpd.exclusions', '**/simulator/**'
    property 'sonar.coverage.exclusions', '**/simulator/**'
    property 'sonar.coverage.jacoco.xmlReportPaths',
      file(layout.buildDirectory.file('reports/jacoco/jacocoFullReport/jacocoFullReport.xml'))
  }
}
