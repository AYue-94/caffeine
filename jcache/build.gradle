/**
 * JCache compatibility adapter.
 */
import org.gradle.plugins.ide.eclipse.model.Library

apply plugin: 'eclipse'

configurations {
  tckSources
  tck
  doc
}

dependencies {
  api project(':caffeine')
  api libraries.jcache
  api libraries.config
  api libraries.jsr330
  api libraries.osgiComponentAnnotations

  testImplementation libraries.guava
  testImplementation libraries.slf4jNop
  testImplementation testLibraries.junit
  testImplementation testLibraries.testng
  testImplementation testLibraries.mockito
  testImplementation testLibraries.hamcrest
  testImplementation testLibraries.jcacheTck
  testImplementation testLibraries.jcacheTckTests
  testImplementation testLibraries.jcacheGuice
  testImplementation testLibraries.guavaTestLib

  tck dependencies.create(testLibraries.jcacheTckTests) {
    transitive = false
  }
  tckSources dependencies.create(testLibraries.jcacheTckTestSources) {
    transitive = false
  }

  doc "${libraries.jcache}:javadoc"
}

tasks.named('compileJava').configure {
  modularity.inferModulePath = false
}

tasks.named('jar').configure {
  manifest {
    attributes 'Bundle-SymbolicName': 'com.github.ben-manes.caffeine.jcache'
    attributes 'Import-Package': [
      '!org.checkerframework.checker.*',
      '*'].join(',')
    attributes 'Export-Package': [
      'com.github.benmanes.caffeine.jcache.spi',
      'com.github.benmanes.caffeine.jcache.copy',
      'com.github.benmanes.caffeine.jcache.configuration'].join(',')
    attributes 'Automatic-Module-Name': 'com.github.benmanes.caffeine.jcache'
    attributes '-exportcontents': '${removeall;${packages;VERSIONED};${packages;CONDITIONAL}}'
    attributes '-snapshot': 'SNAPSHOT'
    attributes '-noextraheaders': true
  }
}

def unzipJCacheJavaDoc = tasks.register('unzipJCacheJavaDoc', Copy) {
  group = 'Build'
  description = 'Unzips the JCache JavaDoc'
  from configurations.doc.collect { zipTree(it) }
  into { layout.buildDirectory.dir('jcache-docs') }
}

tasks.named('javadoc').configure {
  dependsOn(unzipJCacheJavaDoc)
  options.addStringOption('Xdoclint:none', '-quiet')
  options.linksOffline(
    "https://static.javadoc.io/javax.cache/cache-api/${versions.jcache}/",
    'build/jcache-docs')
}

tasks.named('test').configure {
  useTestNG()
}

tasks.register('unzipTestKit', Copy) {
  group = 'Build'
  description = 'Unzips the JCache TCK'
  from configurations.tck.collect { zipTree(it) }
  into { layout.buildDirectory.dir('tck') }
}

def testCompatibilityKit = tasks.register('testCompatibilityKit', Test) {
  group = 'Build'
  description = 'Runs the JCache TCK'
  dependsOn(unzipTestKit)
  onlyIf { compileTestJava.didWork || unzipTestKit.didWork }

  useJUnit()
  testClassesDirs = layout.buildDirectory.files('tck')

  def pkg = 'com.github.benmanes.caffeine.jcache'
  systemProperty 'java.net.preferIPv4Stack', 'true'
  systemProperty 'javax.cache.Cache', "${pkg}.CacheProxy"
  systemProperty 'javax.cache.Cache.Entry', "${pkg}.EntryProxy"
  systemProperty 'javax.cache.CacheManager', "${pkg}.CacheManagerImpl"
  systemProperty 'org.jsr107.tck.management.agentId', 'CaffeineMBeanServer'
  systemProperty 'javax.management.builder.initial', "${pkg}.management.JCacheMBeanServerBuilder"
}

eclipse.classpath.file.whenMerged {
  def tests = entries.find { (it instanceof Library) && (it.path ==~ /.*cache-tests.*-tests.jar/) }
  tests?.sourcePath = fileReference(file(configurations.tckSources.asPath))
}

def osgiTest = tasks.register('osgiTest', Test) {
  group = 'Build'
  description = 'Isolated OSGi tests'
  useJUnit()
  systemProperty 'config.osgi.version', versions.config
  systemProperty 'jcache.osgi.version', versions.jcache
  systemProperty 'felixScr.version', testVersions.felixScr
  systemProperty 'osgiUtil.promise', testVersions.osgiUtilPromise
  systemProperty 'osgiUtil.function', testVersions.osgiUtilFunction
  systemProperty 'osgiService.component', testVersions.osgiSvcComponent
  systemProperty 'caffeine.osgi.jar', project(':caffeine').jar.archivePath.path
  systemProperty 'caffeine-jcache.osgi.jar', project(':jcache').jar.archivePath.path
}

tasks.named('test').configure {
  dependsOn(testCompatibilityKit)
  dependsOn(osgiTest)
}
