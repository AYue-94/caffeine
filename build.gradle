import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'io.snyk.gradle.plugin.snykplugin'
apply plugin: 'org.kordamp.gradle.source-stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.owasp.dependencycheck'

apply from: "${rootDir}/gradle/coverage.gradle"

buildscript {
  apply from: "${rootDir}/gradle/dependencies.gradle"

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  dependencies {
    classpath gradlePlugins.values()
    classpath platforms.collect { platform(it) }

    configurations.all { configuration ->
      restrictions.each { module, version ->
        constraints.add(configuration.name, module).version { require version }
      }
    }
  }
}

allprojects {
  apply plugin: 'com.github.ethankhall.semantic-versioning'
  apply from: "${rootDir}/gradle/eclipse.gradle"

  group = 'com.github.ben-manes.caffeine'
  version.with {
    major = 3 // incompatible API changes
    minor = 1 // backwards-compatible additions
    patch = 2 // backwards-compatible bug fixes
    releaseBuild = rootProject.hasProperty('release')
  }

  dependencies {
    def deprecated = ['apiElements', 'archives', 'compileClasspath', 'default',
      'runtimeClasspath', 'runtimeElements', 'testCompileClasspath', 'testRuntimeClasspath']
    configurations.all { configuration ->
      if (name !in deprecated) {
        restrictions.each { module, version ->
          constraints.add(configuration.name, module).version { require version }
        }
      }
    }
  }
}

subprojects {
  apply plugin: 'biz.aQute.bnd.builder'
  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  apply from: "${rootDir}/gradle/publish.gradle"
  apply from: "${rootDir}/gradle/codeQuality.gradle"
  apply from: "${rootDir}/gradle/dependencies.gradle"
  apply from: "${rootDir}/gradle/objectLayout.gradle"

  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute module('org.hamcrest:hamcrest-core') using module(testLibraries.hamcrest)
    }
  }

  dependencies {
    implementation platforms.collect { platform(it) }
    annotationProcessor platforms.collect { platform(it) }

    testImplementation libraries.guava
    testImplementation testLibraries.junit
    testImplementation testLibraries.truth
    testImplementation testLibraries.testng
    testImplementation testLibraries.mockito
    testImplementation testLibraries.hamcrest
    testImplementation testLibraries.awaitility
    testImplementation testLibraries.osgiCompile

    testRuntimeOnly testLibraries.osgiRuntime
    testRuntimeOnly testLibraries.junitEngines
  }

  tasks.register('bundle', aQute.bnd.gradle.Bundle) {
    from sourceSets.main.output
    sourceSet = sourceSets.main
  }

  tasks.withType(JavaCompile).configureEach {
    if (name.contains('Test') || name.contains('Jmh')) {
      options.errorprone.nullaway {
        severity = CheckSeverity.OFF
      }
    }
  }

  if (project != project(':caffeine')) {
    javadoc.options.linksOffline(
      "https://static.javadoc.io/${group}/caffeine/${version}/",
      '../caffeine/build/docs/javadoc/')
    javadoc.dependsOn(project(':caffeine').javadoc)
  }
}

nexusPublishing {
  repositories {
    sonatype {
      username = project.properties['nexusUsername'] ?: System.env.NEXUS_USERNAME
      password = project.properties['nexusPassword'] ?: System.env.NEXUS_PASSWORD
    }
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE'].any { version.toUpperCase().contains(it) }
  def unstableKeyword = ['PREVIEW'].any { version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return (!stableKeyword || unstableKeyword) && !(version ==~ regex)
}
tasks.named('dependencyUpdates').configure {
  resolutionStrategy {
    componentSelection {
      all {
        def unstable = ['javax.json.bind', 'org.jetbrains.kotlin']
        if (isNonStable(it.candidate.version) && it.candidate.group in unstable) {
          reject('release candidate')
        }
      }
      force libraries.coherence
    }
  }
}

dependencyCheck {
  formats = ['html', 'sarif']
}
dependencyCheckAggregate.dependsOn(subprojects*.tasks.jar)

snyk {
  arguments = "--all-sub-projects ${findProperty('snykArgs') ?: ''}"
  api = System.env.SNYK_TOKEN
  autoDownload = true
  autoUpdate = true
}
