/**
 * Configures the project in Eclipse.
 *
 * @see https://gradle.org/docs/current/userguide/eclipse_plugin.html
 */
import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'eclipse'

// Exclude module-info and package-info when compiling through Eclipse
eclipse.classpath.file.whenMerged {  
  var sourceFolders = entries.findAll { it instanceof SourceFolder }
  for (var sourceFolder : sourceFolders) {
    sourceFolder.excludes += 'module-info.java'
    if (sourceFolder.path != 'src/main/java') {
      sourceFolder.excludes += '**/package-info.java'
    }
  }
}

// Set the project encoding
eclipse.classpath.file.whenMerged {
  def prefs = file('.settings/org.eclipse.core.resources.prefs')
  if (!prefs.exists()) {
    prefs.parentFile.mkdirs()
    prefs.write("eclipse.preferences.version=1\n")
  }
  if (!prefs.text.contains('encoding/<project>')) {
    prefs.append('encoding/<project>=UTF-8\n')
  }
}

// For the Gradle Eclipse plugin
eclipse.project.file.withXml { provider ->
  ignoreDerivedResources(provider.asNode())
}

// For the Eclipse STS plugin
tasks.register('afterEclipseImport') {
  group = 'IDE'
  description = 'Post processing after project generation'
  ext.srcFile = file('.project')
  inputs.file srcFile
  outputs.dir srcFile
  onlyIf { srcFile.exists() }
  doLast {
    def projectDescription = new XmlParser().parse(srcFile)
    ignoreDerivedResources(projectDescription)
    def writer = new FileWriter(srcFile)
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(projectDescription)
  }
}

def ignoreDerivedResources(projectDescription, directories = [
    'test-output', 'build/classes', 'build/reports', 'build/jacoco', 'build/tmp']) {
  def count = directories.count { file(it).exists() }
  if (count > 0) {
    def filter = projectDescription
      .appendNode('filteredResources')
      .appendNode('filter')
    filter.appendNode('id', System.currentTimeMillis().toString().trim())
    filter.appendNode('type', '26')
    filter.appendNode('name')
    def matcher = filter.appendNode('matcher')
    matcher.appendNode('id', 'org.eclipse.ui.ide.orFilterMatcher')
    def arguments = matcher.appendNode('arguments')
    directories.each {
      if (file(it).exists()) {
        def dirMatcher = arguments.appendNode('matcher')
        dirMatcher.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
        dirMatcher.appendNode('arguments', "1.0-projectRelativePath-matches-false-false-${it}")
      }
    }
  }
}
